
import  PaginationController from "../utils/Pagination"


const [page,setPage] =useState(1);
const [count,setCount] =useState();
 const [total, setTotal] = useState();


    const handlePageChange =(event, value)=>{
        setPage(value)
    }


setListInstanceData(response?.data?.results ? response?.data?.results : response?.data)
  setCount(data?.count)
if (!total){
                        setTotal(Math.ceil(response?.data?.count / response?.data?.results?.length))
                    }


  if (response.status === 200) {
setListInstanceData(data?.results ? data?.results : data)
 if (!total){
                    setTotal(Math.ceil(data?.count / data?.results?.length))
                }
setCount(data?.count)
  }


  
create
------
setListInstanceData([ response?.data, ...listInstanceData.slice(0, -1)])         
setCount(count+1)


?page=${page}

   <Grid item xs={12}>

                        <PaginationController
                            page={page}
                            setPage={setPage}
                            handlePageChange={handlePageChange}
                            count={count}
                            data={tableData}
                            total={total}

                        />
                    </Grid>







     paginated_queryset = paginator.paginate_queryset(queryset, request) 
     return paginator.get_paginated_response(serializer.data)




      if (response.status ===200){
            setListInstanceData(data?.results ? data?.results : data);
            setCount(data?.count)
           }